def gaussian_blur(image, g_ker):
    """Applies Gaussian blurring to the input image using the Gaussian kernel g_ker"""
    kernel_row_col = g_ker.shape
    kernel_row = kernel_row_col[0]
    kernel_col = kernel_row_col[1]

    image_row_col = image.shape
    image_row = image_row_col[0]
    image_col = image_row_col[1]

    # Calculate the padding amounts for rows and columns
    pad_rows = kernel_row // 2
    pad_cols = kernel_col // 2

    # Pad the image with zeros
    padded_image = np.pad(image, ((pad_rows, pad_rows), (pad_cols, pad_cols)), mode='constant')

    # Apply the Gaussian kernel
    result = np.zeros_like(image)
    for row in range(image_row):
        for col in range(image_col):
            pixel = np.sum(padded_image[row:row+kernel_row, col:col+kernel_col] * g_ker)
            result[row, col] = pixel

    return result